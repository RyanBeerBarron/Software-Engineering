(in-package :software-engineering-test)
;; NOTE: To run this test file, execute `(asdf:test-system :software-engineering)' in your Lisp.

(defparameter *graph* (digraph:make-digraph :initial-vertices '(a b c d e f g h i j)))
(digraph:insert-edge *graph* 'a 'b)
(digraph:insert-edge *graph* 'a 'c)
(digraph:insert-edge *graph* 'a 'd)
(digraph:insert-edge *graph* 'b 'e)
(digraph:insert-edge *graph* 'b 'f)
(digraph:insert-edge *graph* 'e 'g)
(digraph:insert-edge *graph* 'c 'g)
(digraph:insert-edge *graph* 'e 'i)
(digraph:insert-edge *graph* 'g 'j)
(digraph:insert-edge *graph* 'c 'i)

(defparameter *emptygraph* (digraph:make-digraph))	

(defparameter *graph2* (digraph:make-digraph :initial-vertices '(1 2 11 12 13 14 21 22)))
(digraph:insert-edge *graph2* 1 11)
(digraph:insert-edge *graph2* 1 12)
(digraph:insert-edge *graph2* 1 13)
(digraph:insert-edge *graph2* 1 14)
(digraph:insert-edge *graph2* 2 11)
(digraph:insert-edge *graph2* 2 12)
(digraph:insert-edge *graph2* 2 13)
(digraph:insert-edge *graph2* 2 14)
(digraph:insert-edge *graph2* 11 21)
(digraph:insert-edge *graph2* 11 22)
(digraph:insert-edge *graph2* 12 21)
(digraph:insert-edge *graph2* 12 22)
(digraph:insert-edge *graph2* 13 21)
(digraph:insert-edge *graph2* 13 22)
(digraph:insert-edge *graph2* 14 21)
(digraph:insert-edge *graph2* 14 22)

(defparameter *graph3* (digraph:make-digraph :initial-vertices '(1 2 3 4 10 11 12 13 14 15 16 17 18 19 21 22 23)))
(digraph:insert-edge *graph3* 1 10)
(digraph:insert-edge *graph3* 1 11)
(digraph:insert-edge *graph3* 1 12)
(digraph:insert-edge *graph3* 1 13)
(digraph:insert-edge *graph3* 2 10)
(digraph:insert-edge *graph3* 2 11)
(digraph:insert-edge *graph3* 2 12)
(digraph:insert-edge *graph3* 2 13)
(digraph:insert-edge *graph3* 3 14)
(digraph:insert-edge *graph3* 3 15)
(digraph:insert-edge *graph3* 3 16)
(digraph:insert-edge *graph3* 3 17)
(digraph:insert-edge *graph3* 3 18)
(digraph:insert-edge *graph3* 3 19)
(digraph:insert-edge *graph3* 4 14)
(digraph:insert-edge *graph3* 4 15)
(digraph:insert-edge *graph3* 4 16)
(digraph:insert-edge *graph3* 4 17)
(digraph:insert-edge *graph3* 4 18)
(digraph:insert-edge *graph3* 4 19)
(digraph:insert-edge *graph3* 11 21)
(digraph:insert-edge *graph3* 11 22)
(digraph:insert-edge *graph3* 11 23)
(digraph:insert-edge *graph3* 14 21)
(digraph:insert-edge *graph3* 14 22)
(digraph:insert-edge *graph3* 14 23)

(defparameter *notconnected* (digraph:make-digraph :initial-vertices '(a b c d)))
(digraph:insert-edge *notconnected* 'a 'b)
(digraph:insert-edge *notconnected* 'c 'd)
  
(format t "Graph is: ~a~%With edges: ~a~%" *graph* (digraph:edges *graph*))


(defun list-equal (list1 list2)
	(equal nil (set-difference list1 list2)))

(plan nil)
(is (LCA *graph* 'b 'c) 'a "LCA of b and c is a")
(is (LCA *graph* 'c 'd) 'a "LCA of c and d is a")
(is (LCA *graph* 'e 'd) 'a "LCA of e and d is a")
(is (LCA *graph* 'e 'f) 'b "LCA of e and f is b")
(is (LCA *graph* 'g 'i) (list 'c 'e) :test #'list-equal "LCA of g and i is c and e")
(is (LCA *graph* 'g 'j) 'g "LCA of g and j is g")
(is (LCA *graph* 'c 'd) 'a "LCA of c and d is a")
(is (LCA *graph* 'b 'j) 'b "LCA of b and j is b")
(is (LCA *graph* 'i 'j) (list 'c 'e) :test #'list-equal "LCA of i and j is c and e")

(is (LCA *graph2* 21 22) (list 11 12 13 14) :test #'list-equal "LCA of 21 and 22 is 11, 12, 13 and 14")
(is (LCA *graph3* 21 22) (list 11 14) :test #'list-equal "LCA of 21 and 22 is 11 and 14")
(is (LCA *graph3* 11 14) nil "LCA of 11 and 14 is nil")
(is (LCA *notconnected* 'a 'c) nil "LCA of a and c is nil")
(is (LCA *notconnected* 'a 'd) nil "LCA of a and d is nil")
(is (LCA *notconnected* 'b 'd) nil "LCA of b and d is nil")

(is (LCA nil nil nil) nil "LCA of nil and nil in nilgraph is nil")
(is (LCA *graph* nil nil) nil "LCA of nil and nil is nil")
(is (LCA *graph* 'a nil) nil "LCA of nil and nil is nil")
(is (LCA *emptygraph* 'a 'b) nil "LCA of a and b in emptygraph is nil")
(is (LCA nil 'a 'b) nil "LCA of a and b is nil")
(is (LCA *graph* 10321 244343) nil "LCA of int and int is nil")
(is (LCA *graph* 'a 34546534) nil "LCA of a and int is nil")
(finalize)

